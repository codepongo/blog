<h1>Swift 和 Objective-C 互相调用</h1>

<h2>Objective-C 调用 Swift</h2>

<h3>Swift 类</h3>

<p>Swift类定义前加入@objc关键字，并使类继承自NSObject</p>

<pre data-language="swift">
@objc class S : NSObject{
    func m() {
        print(__FUNCTION__)
    }
}
</pre>

<h3>在调用Swift代码的Objc文件中加入名类似为"xxx-Swift.h"的头文件</h3>

<p>头文件具体的名字可在 设置选项：</p>

<blockquote>
  <p>{project} - {targets} - {build settings} - {swift compiler - code generation} - {Objective-C Generated Interface Header Name}</p>
</blockquote>

<p><img src="/objc-calls-swift-with-header-name.png" alt="objc调用swift头文件名" /></p>

<pre data-language="swift">

 #import "objc_swift-Swift.h"
int main(int argc, const char * argv[]) {
   @autoreleasepool {
        S* s = [[S alloc]init];
        [s m];
    }
    return 0;
 }
</pre>

<h2>Swift 调用 Objective-C</h2>

<h3>创建桥接文件</h3>

<p><img src="/create-bridging-header.png" alt="创建桥接文件" /></p>

<p>选择Create Bridging Header</p>

<h3>桥接文件在如下设置位置</h3>

<blockquote>
  <p>{project} - {targets} - {build settings} - {swift compiler - code generation} - {Objective-C Bridging Header}</p>
</blockquote>

<h3>将要调用的ObjC类头文件import至桥接文件中</h3>

<pre data-language="objc">
//
//  Use this file to import your target's public headers that you would like to expose to Swift.
//

 #import "O.h"
</pre>

<h3>ObjC 代码</h3>

<p>.h 文件</p>

<pre data-language="objc">
@interface O : NSObject
-(void)m;
@end
</pre>

<p>.m 文件</p>

<pre data-language="objc">
@implementation O
-(void)m {
    NSLog(@"%s", __FUNCTION__);
}
@end
</pre>

<p>swift 文件</p>

<pre data-language="swift">
@objc class S : NSObject{
    let o:O = O()
    func m() {
        o.m()
        print(__FUNCTION__)
    }
}
</pre>

<h2>示例工程</h2>

<p><a href="https://github.com/codepongo/utocode/xos/objc-swift">objc-swift</a></p>

#html